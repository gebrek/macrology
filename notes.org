* On Lisp
** <2016-02-04 Thu>
*** "Lisp Programs /are/ Data (Homoiconic)"
*** Embedded Language
    A language built in such a way that the mother language (i.e. Lisp)
    can "appear unchanged" in the new language.
*** Common Lisp has seperate namespaces for functions and data
    #+BEGIN_SRC lisp
      (defun double (x)
         (* x 2))
      (defvar double 3)

      (double double) ; => 6
    #+END_SRC
*** (Thankfully) Common Lisp is lexically scoped
    I do like dynamic scoping, which previously "was considered on of
    the defining features of Lisp", and you can do pretty neat
    things. Like in emacs-lisp you can change the behavior of a
    function without altering it, but by altering the environment it's
    called in. Pretty neat!

    On the flip side lexical scoping is easier to understand with a
    static representation of the program (i.e. code) whereas dynamic
    scoping you seem to need an understanding of the program in motion
    which is harder to grok.
*** Closures
    When a function is defined with free variables the environment must
    save copies of the bindings of those variables when the function is
    defined. This function + variable bindings is called a /closure/.
** <2016-02-05 Fri>
*** regarding defvar and defparameter
    i suppose defvar came out of the interactive side of lisp, and
    defparameter the static side.
* Template Meta-programming for Haskell
** quasi-quotation mechanism
   * ... allows gensym-like operator in purely functional language
** staged type checking algorithm
** reification of programmer-written components
   * useful for boilerplate generation
** metaprogramming use cases
*** conditional compilation
    * good for portability
    * prepocessors are a "crude approach"
*** program reification
    * programs inspecting their own structure
*** algorithmic program construction
    * algorithms describing how to construct the program may be
      simpler than the program
*** abstractions that transcend the abstraction mechanisms accessible in the language
    * through powerful tools to manipulate the language you may
      effectively build into the language anything you can come up
      with a notation for
** haskell metaprogramming (quasiquoting)
   superior to cpp :-). big advantages come if, like in haskell, your
   metaprogramming facilities exist in the same scope as the rest of
   the language. you can use existing libraries, and learning the
   syntax of a new language is minimal. disadvantages: nonterminating
   code will cause the compiler to run forever.
*** splice `$(some expression)', `$symbol'
*** quasiquote `[| some expression |]'
*** typing rules
    staring at this, it's a bit lost on me so far
*** datatypes for code
    a list of algebraic datatypes used to represent code in template
    haskell
    * Exp :: expressions
    * Dec :: declarations
    * Pat :: patterns
    * Typ :: types
    * Body :: guarded definitions
    * Statement :: ~do~ expressions and comprehensions
    * DotDot :: arithmetic sequences
**** thoughts
     the simpler you're able to represent the language's syntax the
     better. avoid if possible battalions of special cases.
** hygenic macros
   every occurrence of a variable is bound to the value that is
   lexically in scope at the occurrence site in the original source         
   program, before any template expansion
** characteristic comparisons
*** template haskell macros
    * called at site, no different syntax for defining a function that
      uses metaprogramming utilities
    * purely compile time, no code building/executing at run time
*** c++ templates
    * compile time computation that takes place in the /type system/
    * type system is essentially `baroque' functional language
*** scheme macros
    * defining them with special binding: ~define-syntax~
    * scheme macros first order, haskell template are higher-order
      and first class
    * admitting side effects raises questions
      * when is a mutable value instatiated?
      * can it move from compile-time to run-time?
      * when is it shared?
      * etc.
*** metaml
    * code is built and executed at run time
    * everything is statically type checked
    * type checking is lazy
      * allows more powerufl programs without dependent types
    * if metaml code generating program is type-correct then so are
      all the programs it generates
      * this security means `metaml cannot express many useful programs' eg. printf
* cffi
  `common foreign function interface'. "define foreign function 
  interfaces while still maintaining portability between
  implementations." 
** advantages
   * per-function c bindings
   * other language bindings, like for ruby, python, perl, etc are
     implemented as shared objects written in C, or a tool generates
     the code. translates between calling conventions
   * in lisp the bindings are written in lisp.
   * created at-will, new bindings written on a per-function basis and
     added to the listener (SLIME, inferior-lisp)
   * only function loaded is the one being wrapped
   * 
* blas
  `basic linear algebra system'
  [[file:cblas.h][cblas headers]]
  [[file:lapacke.h][lplacke headers]]
